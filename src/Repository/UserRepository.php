<?php

namespace App\Repository;

use App\Entity\Log;
use DateTime;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Symfony\Component\Serializer\Serializer;

/**
 * UserRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{

    public function getUsersByFilter($fields)
    {
        /**
         * @var EntityManager $em
         */
        $em = $this->getEntityManager();
        $parameters = [];

        $query = $this->createQueryBuilder('u');
        $count = 1000;
        $offset = 0;

        foreach ($fields as $key => $value) {
            if($value){
                if($key === 'count' || $key === 'offset'){
                    if($key === 'count'){
                        $count = $value;
                    } else if ($key === 'offset'){
                        $offset = $value;
                    }
                } else if($key === 'status'){
                    $query->andWhere('u.' . $key  . ' IN ('  . implode(',', $value) .')');
                } else if ($key === 'comment') {
                    $parameters[$key] =  '%' . $value . '%';
                    $query->andWhere('u.' . $key  . ' LIKE ' .  ':' . $key);
                } else if($key === 'xApiDate'){
                    $xApiDate = new DateTime($value . ' 23:59:59');
                    $parameters[$key] = $xApiDate;
                    $query->andWhere('u.created <=' .  ':' . $key);
                } else if($key === 'xArchiveId'){
                    $key = 'archive';
                    $parameters[$key] = $value;
                    $query->andWhere('u.' . $key  . ' = ' .  ':' . $key);
                } else {
                    $parameters[$key] = $value;
                    $query->andWhere('u.' . $key  . ' = ' .  ':' . $key);
                }
            } else if ($value == 0) {
                if($key === 'status'){
                    $parameters[$key] = $value;
                    $query->andWhere('u.' . $key  . ' = ' .  ':' . $key);
                }
            }
        }

        $query->orderBy('u.created', 'DESC');

        $query = $em
            ->createQuery($query->getDQL())
            ->setParameters($parameters)
            ->setFirstResult($offset)
            ->setMaxResults($count);

        $paginator = new Paginator($query, $fetchJoinCollection = true);

        return $paginator;
    }

    public function getUsers($xArchiveId)
    {
        /**
         * @var EntityManager $em
         */
        $em = $this->getEntityManager();

        $usersDataQuery = $em->createQuery('SELECT u, (SELECT COUNT(v.id) FROM App:Voting v WHERE u.id = v.user AND v.archive = :xArchiveId) as votingCount FROM App:User as u')
        ->setParameters(['xArchiveId' => $xArchiveId]);

        $usersData = $usersDataQuery->getResult();

        return $usersData;
    }

    public function getUsersByStatus($xArchiveId, $status)
    {
        /**
         * @var EntityManager $em
         */
        $em = $this->getEntityManager();

        $usersDataQuery = $em->createQuery('SELECT u FROM App:User as u WHERE u.status = :status')
            ->setParameters(['status' => $status]);

        $usersData = $usersDataQuery->getResult();

        return $usersData;
    }
}
